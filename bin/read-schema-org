#!/usr/bin/env node

var fs = require('fs'),
    exec = require('child_process').exec,
    path = require('path'),
    spawn = require('child_process').spawn,
    async = require('async'),
    optimist = require('optimist'),
    neuron = require('neuron'),
    schemaOrg = require('../lib');
  
//
// Setup the optimist CLI arguments
//    
var argv = optimist.options({
  force: {
    description: 'Value indicating if we should force the remote list parse',
    boolean: true,
    default: true
  },
  schemaDir: {
    description: 'Directory to place schemas in'
  },
  url: {
    description: 'Remote URL to parse schemas from'
  },
  concurrency: {
    alias: 'c',
    description: 'concurrency value passed to neuron',
    default: 4
  },
  help: {
    alias: 'h',
    description: 'Youre staring at it'
  }
}).argv;

//
// If we should print the help for this 
// script then do so.
//
if (argv.h || argv.help) {
  console.log([
    'read-schema-org: Read and parse the schemas at schema.org using the specified options',
    ''
  ].join('\n'));
  console.log(optimist.help());
  return;
}

//
// Setup `node-schema-org` to use the winston.cli() logger.
//
schemaOrg.logger.cli();

var schemaDir    = argv.schemaDir || path.join(__dirname, '..', 'schemas'),
    allSchemas   = path.join(schemaDir, 'schema-list.json'),
    downloadList = false;

function streamChild (params, callback) {
  schemaOrg.logger.info('Spawning: node ' + params.join(' ').yellow);
  
  var child = spawn('node', params);
  
  child.stdout.on('data', function (data) {
    process.stdout.write(data.toString());
  });
  
  child.stderr.on('data', function (data) {
    process.stdout.write(data.toString());
  });
  
  child.on('exit', function () {
    schemaOrg.logger.info('node ' + params.join(' ').yellow + ' has exited.');
    callback();
  });
}

function readLocal (done) {
  fs.readFile(allSchemas, function (err, data) {
    if (err) {
      schemaOrg.logger.warn('Error reading schema-list.json');
      schemaOrg.logger.warn(err.message);
      schemaOrg.logger.warn('All schemas will be downloaded remotely.');
      return done(err);
    }
    
    try {
      data = JSON.parse(data.toString());
    }
    catch (ex) {
      return done(ex);
    }
    
    done(null, data.schemas);
  });
}

function removeLocalSchemas (done) {
  winston.warn('Removing all schemas in ' + schemaDir.magenta);
  fs.readdir(schemaDir, function (err, files) {
    if (err) {
      return done(err);
    }
    
    files = files.filter(function (file) {
      return file !== 'schema-list.json'
    });
    
    function removeFile (file, next) {
      schemaOrg.logger.info('Removing old file: ' + file);
      fs.unlink(path.join(schemaDir, file), next);
    }
    
    async.forEach(files, removeFile, done);
  });
}

function parseAllSchemas (schemas) {

  if (argv._.length) {
    schemas = schemas.filter(function (a) { return argv._.indexOf(a) !== -1; });
  }
  
  var manager = new neuron.JobManager({ concurrency: argv.concurrency }),
      completed = 0;

  manager.addJob('readSchema', {
    work: function (schema) {
      var that = this,
          readOptions;
          
      readOptions = [
        path.join(__dirname, 'parse-schema'), 
        '--type', 
        schema,
        '--no-verbose'
      ];
        
      streamChild(readOptions, function () {
        that.finished = true;
      });
    }
  });

  manager.on('finish', function (job, worker) {
    completed += 1;

    if (completed === schemas.length) {
      schemaOrg.logger.info('');
      schemaOrg.logger.info('Done parsing all schemas from ' + 'schema.org'.magenta);
      schemaOrg.logger.info('They are located in: ' + schemaDir.magenta);
      schemaOrg.logger.info('');
    }
  });

  schemas.forEach(function (schema) {
    manager.enqueue('readSchema', schema);
  });
}


//
// Attempt to read the local schemas
//
readLocal(function (err, schemas) {
  if (err) {
    downloadList = true;
  }
  
  removeLocalSchemas(function (err) {
    if (err) {
      //
      // Ignore errors.
      //
    }
    
    if (downloadList) {
      return streamChild([path.join(__dirname, 'list-schemas')], function () {
        readLocal(function (err, schemas) {
          parseAllSchemas(schemas);
        });
      });
    }
    
    parseAllSchemas(schemas);
  })
});
